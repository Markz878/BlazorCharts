@inherits StackedBarChartBase

<svg class="chart" viewBox="0 0 @Width @Height">
    <ChartTitle Width=@Width Title=@Title FontSize=@TitleFontSize FontColor=@FontColor/>
    <g>
        @foreach (double value in YAxis)
        {
            <line x1=@MarginLeft.ToString(c) y1=@GetYCoordinate(value).ToString(c) x2=@((Width - MarginRight).ToString(c)) y2=@GetYCoordinate(value).ToString(c) style="stroke:#e0e0e0;stroke-width:1" />
        }
    </g>
    <g>
        @foreach (double value in YAxis)
        {
            <text>
                <text x=@((MarginLeft-10).ToString(c)) y=@GetYCoordinate(value).ToString(c) font-size=@FontSize fill=@FontColor text-anchor="end" dominant-baseline="middle">@value.ToString(StringFormat)</text>
            </text>
        }
    </g>
    <g transform="rotate(270, 10, @((Height/2).ToString(c)))">
        <text x="10" y=@((Height/2).ToString(c)) font-size=@FontSize fill=@FontColor text-anchor="middle" dominant-baseline="middle">@YAxisTitle</text>
    </g>
    <g>
        @foreach ((string title, int index) in Data.Titles.Select((x, i) => (x, i)))
        {
            <text>
                <text x=@GetXCoordinate(index).ToString(c) y=@((Height-MarginBottom+20).ToString(c)) font-size=@GetColumnTitleFontsize() fill=@FontColor transform=@GetTitleTransform(index) text-anchor="middle" class="monospaced">@title</text>
            </text>
        }
    </g>
    <g>
        @for (int i = 0; i < Data.Titles.Count; i++)
        {
            int columnIndex = i;
            double sum = 0;
            @for (int j = 0; j < Data.Series.Count; j++)
            {
                int serieIndex = j;
                sum += Data.Series[serieIndex].Values[columnIndex].Value;
                <rect x=@((GetXCoordinate(columnIndex)-GetBarWidth()/2).ToString(c)) y=@GetYCoordinate(sum).ToString(c) height=@GetBarHeight(Data.Series[serieIndex].Values[columnIndex].Value).ToString(c) width=@GetBarWidth().ToString(c) stroke="black" stroke-width="1" fill=@Data.Series[serieIndex].Color rx="2" class="data-item @(Animate ? "bar-animate" : "")" @onmouseover=@(()=>MouseOver(serieIndex, columnIndex)) @onmouseout=@MouseLeave />
            }
        }
        @if (Data.ShowLabels)
        {
            @for (int i = 0; i < Data.Titles.Count; i++)
            {
                int columnIndex = i;
                double sum = 0;
                @for (int j = 0; j < Data.Series.Count; j++)
                {
                    int serieIndex = j;
                    sum += Data.Series[serieIndex].Values[columnIndex].Value;
                    <text>
                        <text x=@GetXCoordinate(columnIndex).ToString(c) y=@((GetYCoordinate(sum)+GetBarHeight(Data.Series[serieIndex].Values[columnIndex].Value)/2+(Data.Titles.Count < 6 ? 5 : 3)).ToString(c)) font-size=@LabelFontSize fill=@Data.Series[serieIndex].LabelColor class="data-label @(Animate ? "bar-animate" : "")">@Data.Series[serieIndex].Values[columnIndex].Value.ToString("G4")</text>
                    </text>
                }
            }
        }
    </g>
    @if (ShowLegend)
    {
        <Legend Height=@Height Width=@Width Titles=@GetTitles() FontSize=@FontSize FontColor=@FontColor/>
    }
    @if (showTooltip)
    {
        <Tooltip Height=@Height Width=@Width TooltipInfo=@tooltipInfo FontSize=@FontSize/>
    }
</svg>
