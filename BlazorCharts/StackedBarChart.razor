@inherits StackedBarChartBase

<svg class="chart" viewBox="0 0 @Width @Height">
    <text x="@(Width/2)" y="15" font-size="16px" text-anchor="middle">@Title</text>
    <g>
        @foreach (double value in YAxis)
        {
            <line x1="@MarginLeft" y1="@GetYCoordinate(value)" x2="@(Width - MarginRight)" y2="@GetYCoordinate(value)" style="stroke:#e0e0e0;stroke-width:1" />
        }
    </g>
    <g>
        @foreach (double value in YAxis)
        {
            <text>
                <text x="@(MarginLeft-10)" y="@GetYCoordinate(value)" font-size="12px" text-anchor="end" dominant-baseline="middle">@value</text>
            </text>
        }
    </g>
    <g transform="rotate(270, 10, @(Height/2))">
        <text x="10" y="@(Height/2)" font-size="12px" text-anchor="middle" dominant-baseline="middle">@YAxisTitle</text>
    </g>
    <g>
        @foreach ((string title, int index) in Data.Titles.Select((x, i) => (x, i)))
        {
            <text>
                <text x="@GetXCoordinate(index)" y="@(Height-MarginBottom+20)" font-size="@GetTitleFontsize()" transform="@GetTitleTransform(index)" text-anchor="middle" class="monospaced">@title</text>
            </text>
        }
    </g>
    <g>
        @for (int i = 0; i < Data.Titles.Count; i++)
        {
            int columnIndex = i;
            double sum = 0;
            @for (int j = 0; j < Data.Series.Count; j++)
            {
                int serieIndex = j;
                sum += Data.Series[serieIndex].Values[columnIndex].Value;
                <rect x="@(GetXCoordinate(columnIndex)-GetBarWidth()/2)" y="@GetYCoordinate(sum)" height="@GetBarHeight(Data.Series[serieIndex].Values[columnIndex].Value)" width="@GetBarWidth()" stroke="black" stroke-width="1" fill="@Data.Series[serieIndex].Color" rx="2" class="data-item bar-animate" @onmouseover="()=>MouseOver(serieIndex, columnIndex)" @onmouseout="MouseLeave" />
            }
        }
        @if (Data.ShowLabels)
        {
            @for (int i = 0; i < Data.Titles.Count; i++)
            {
                int columnIndex = i;
                double sum = 0;
                @for (int j = 0; j < Data.Series.Count; j++)
                {
                    int serieIndex = j;
                    sum += Data.Series[serieIndex].Values[columnIndex].Value;
                    <text>
                        <text x="@GetXCoordinate(columnIndex)" y="@(GetYCoordinate(sum)+GetBarHeight(Data.Series[serieIndex].Values[columnIndex].Value)/2+(Data.Titles.Count < 6 ? 5 : 3))" font-size="@(Data.Titles.Count < 6 ? "12px" : "9px")" fill="@Data.Series[serieIndex].TextColor" class="data-label bar-animate">@Data.Series[serieIndex].Values[columnIndex].Value.ToString("G4")</text>
                    </text>
                }
            }
        }
    </g>
    @if (ShowLegend)
    {
        <g>
            <foreignObject x="0" y="@(Height-20)" width="@Width" height="20">
                <div class="legend-container">
                    @for (int i = 0; i < Data.Series.Count; i++)
                    {
                        int index = i;
                        <div class="legend-colorbox" style="background: @Data.Series[index].Color"></div>
                        <div class="legend-text">@Data.Series[index].Title</div>
                    }
                </div>
            </foreignObject>
        </g>
    }
    @if (showTooltip && tooltipProperties is not null)
    {
        <g>
            <foreignObject x="0" y="0" width="@Width" height="@Height" style="pointer-events: none;">
                <div class="tooltip-container" style="transform: translate(@tooltipX, @tooltipY) translate(@tooltipXTranslate, @tooltipYTranslate)">
                    @foreach (string tt in tooltipProperties)
                    {
                        <p class="tooltip-text">@tt</p>
                    }
                </div>
            </foreignObject>
        </g>
    }
</svg>
